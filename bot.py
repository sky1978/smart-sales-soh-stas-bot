import os
import json
import uuid
import tempfile
import logging
import requests
import openai
import redis
import mysql.connector
from mysql.connector import Error
from datetime import datetime, timedelta
import pytz
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.exceptions import BotBlocked
from fastapi import FastAPI
from starlette.requests import Request
import uvicorn
import time
from pathlib import Path

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
VOICE_ID = os.getenv("VOICE_ID")
TTS_PROVIDER = os.getenv("TTS_PROVIDER")  # "OPENAI" –∏–ª–∏ "ELEVENLABS"
MODEL_CHAT = os.getenv("MODEL_CHAT")
MODEL_EVAL = os.getenv("MODEL_EVAL")
BOT_PASSWORD = os.getenv("BOT_PASSWORD")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_DB = int(os.getenv("REDIS_DB", 1))
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=True)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API
openai.api_key = OPENAI_API_KEY
# openai.base_url = "https://api.deepseek.com"

# üîπ –ü—Ä–æ–∫—Å–∏ –¥–ª—è OpenAI (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
PROXY_URL = "http://user206026:yxj7mc@82.153.34.148:9297"
os.environ["HTTPS_PROXY"] = PROXY_URL
os.environ["HTTP_PROXY"] = PROXY_URL

# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ë–î
ORG_ID = os.getenv("ORG_ID", "5")
DB_CONFIG = {
    "host": os.getenv("DB_HOST", "localhost"),
    "database": os.getenv("DB_NAME", "dialog_analysis"),
    "user": os.getenv("DB_USER", "root"),
    "password": os.getenv("DB_PASSWORD", ""),
    "charset": "utf8mb4",
    "use_unicode": True,
    "ssl_disabled": True,
}
EVAL_LIMIT_PER_WEEK = int(os.getenv("EVAL_LIMIT_PER_WEEK", "3"))
REPORT_CRITERION = os.getenv("REPORT_CRITERION", "evaluation_report")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# üîπ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    if isinstance(exception, BotBlocked):
        logging.warning(f"Ignored BotBlocked for update: {update}")
        return True
    return False

# üîπ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
def load_prompt(filename):
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

PROMPT = load_prompt("prompt_stas.txt")
PROMPT_SUPERVISOR = None  # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ë–î

# üîπ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        return conn
    except Error as e:
        logging.error(f"DB connection error: {e}")
        return None

def load_criteria(conn):
    try:
        cur = conn.cursor(dictionary=True)
        cur.execute(
            "SELECT id, name, type FROM audit_criteria WHERE organization_id=%s AND is_active=1 ORDER BY id",
            (ORG_ID,),
        )
        rows = cur.fetchall()
        cur.close()
        return rows
    except Error as e:
        logging.error(f"Failed to load criteria: {e}")
        return []

def get_sale_points(conn):
    try:
        cur = conn.cursor(dictionary=True)
        cur.execute(
            "SELECT sale_point_id, display_name FROM sale_points WHERE organization_id=%s AND is_active=1 ORDER BY sale_point_id",
            (ORG_ID,),
        )
        rows = cur.fetchall()
        cur.close()
        return rows
    except Error as e:
        logging.error(f"Failed to load sale points: {e}")
        return []


def load_supervisor_prompt(conn):
    try:
        cur = conn.cursor(dictionary=True)
        cur.execute(
            "SELECT prompt_id, prompt_text FROM analysis_prompts WHERE organization_id = %s AND is_active = 1 ORDER BY version DESC LIMIT 1",
            (ORG_ID,),
        )
        row = cur.fetchone()
        cur.close()
        if row:
            return row["prompt_id"], row["prompt_text"]
    except Error as e:
        logging.error(f"Failed to load supervisor prompt: {e}")
    return None, None


# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(chat_id):
    return redis_client.get(f"auth:{chat_id}") == "1"


def set_authorized(chat_id):
    redis_client.set(f"auth:{chat_id}", "1")


def awaiting_password(chat_id):
    return redis_client.get(f"await_pass:{chat_id}") == "1"


def set_await_password(chat_id, value=True):
    if value:
        redis_client.set(f"await_pass:{chat_id}", "1")
    else:
        redis_client.delete(f"await_pass:{chat_id}")


# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
# –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è.
MAX_USER_MESSAGES = 50

# üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ –≤ Redis

def get_conversation_key(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á Redis –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞."""
    return f"chat_history:{chat_id}"

def init_conversation_history(chat_id):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.
    –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å —Ä–æ–ª—å—é "system".
    """
    key = get_conversation_key(chat_id)
    system_message = {"role": "system", "content": PROMPT}
    redis_client.delete(key)  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    redis_client.rpush(key, json.dumps(system_message))
    return [system_message]

def get_conversation_history(chat_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id.
    –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, —Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ—ë.
    """
    key = get_conversation_key(chat_id)
    history = redis_client.lrange(key, 0, -1)
    if not history:
        return init_conversation_history(chat_id)
    return [json.loads(item) for item in history]

def trim_conversation_history(chat_id, max_user_messages=MAX_USER_MESSAGES):
    """
    –û—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç) –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_user_messages —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    key = get_conversation_key(chat_id)
    history = get_conversation_history(chat_id)
    # –û–±—â–µ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ: 1 (—Å–∏—Å—Ç–µ–º–Ω—ã–π) + max_user_messages
    if len(history) > max_user_messages + 1:
        new_history = [history[0]] + history[-max_user_messages:]
        redis_client.delete(key)
        for msg in new_history:
            redis_client.rpush(key, json.dumps(msg))

def append_message(chat_id, role, content):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –ø–æ–¥—Ä–µ–∑–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    key = get_conversation_key(chat_id)
    message = {"role": role, "content": content}
    redis_client.rpush(key, json.dumps(message))
    trim_conversation_history(chat_id, MAX_USER_MESSAGES)

# üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏
def generate_audio(text):
    if TTS_PROVIDER.upper() == "OPENAI":
        return generate_audio_openai(text)
    elif TTS_PROVIDER.upper() == "ELEVENLABS":
        return generate_audio_elevenlabs(text)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TTS_PROVIDER. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: 'OPENAI', 'ELEVENLABS'.")

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ OpenAI
def generate_audio_openai(text):

    speech_file_path = Path(tempfile.mktemp(suffix=".mp3"))

    with openai.audio.speech.with_streaming_response.create(
        model="gpt-4o-mini-tts",
        voice="ballad",
        input=text,
        instructions="Speak in Russian with a neutral Moscow accent. Be warm, friendly, slightly enthusiastic. Keep speech fast (160-180 wpm). Intonation should be gently rising on questions to show interest. Smile with your voice. Do not whisper.",
    ) as response:
        response.stream_to_file(speech_file_path)

    return speech_file_path

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
def generate_audio_elevenlabs(text):
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "text": text,
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.75
        }
    }
    
    proxies = {
        "http": PROXY_URL,
        "https": PROXY_URL,
    }
    
    response = requests.post(url, headers=headers, json=data, proxies=proxies)
    
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ElevenLabs API: {response.status_code} - {response.text}")
    
    temp_audio_path = tempfile.mktemp(suffix=".mp3")
    with open(temp_audio_path, "wb") as f:
        f.write(response.content)
    
    return temp_audio_path

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –¥–∏–∞–ª–æ–≥–∞
def evaluate_conversation(chat_id, sale_point_id, start_time_str):
    history = get_conversation_history(chat_id)

    if len(history) <= 1:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º."

    user_assistant_history = history[1:]
    dialog_text = "\n".join(
        [f"{m['role']}: {m['content']}" for m in user_assistant_history]
    )
    logging.info(
        "–û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –¥–ª—è chat_id %s. –ò—Å—Ç–æ—Ä–∏—è: %s",
        chat_id,
        dialog_text,
    )

    conn = get_db_connection()
    if not conn:
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"

    prompt_id, prompt_text = load_supervisor_prompt(conn)
    if not prompt_text:
        conn.close()
        return "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏"

    criteria = load_criteria(conn)
    criteria_map = {c["name"]: c for c in criteria}

    properties = {}
    required = []
    for crit in criteria:
        required.append(crit["name"])
        if crit["type"] == "string":
            properties[crit["name"]] = {"type": "string"}
        elif crit["type"] == "array_string":
            properties[crit["name"]] = {"type": "array", "items": {"type": "string"}}
        elif crit["type"] == "float":
            properties[crit["name"]] = {"type": "number"}
        else:
            properties[crit["name"]] = {"type": "integer"}

    def analyze_dialog(**kwargs):
        tz = pytz.timezone("Europe/Moscow")
        start_dt = datetime.fromisoformat(start_time_str).astimezone(tz)
        end_dt = datetime.now(tz)
        filename = f"bot_dialog_chunk_{chat_id}_{start_dt.strftime('%Y%m%d%H%M%S')}_{end_dt.strftime('%Y%m%d%H%M%S')}"
        chunk_date = start_dt.date()

        try:
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO dialog_chunks (date, start_datetime, end_datetime, filename, organization_id, sale_point_id) VALUES (%s,%s,%s,%s,%s,%s)",
                (
                    chunk_date,
                    start_dt.strftime('%Y-%m-%d %H:%M:%S'),
                    end_dt.strftime('%Y-%m-%d %H:%M:%S'),
                    filename,
                    ORG_ID,
                    sale_point_id,
                ),
            )
            chunk_id = cur.lastrowid

            os.makedirs("dialogs", exist_ok=True)
            with open(os.path.join("dialogs", f"{filename}.txt"), "w", encoding="utf-8") as f:
                f.write(dialog_text)

            cur.execute(
                "INSERT INTO analysis_versions (description, prompt_id) VALUES (%s,%s)",
                (
                    f"Sale_point: {sale_point_id} Chat_id: {chat_id} Bot-Stas: yes",
                    prompt_id,
                ),
            )
            version_id = cur.lastrowid

            cur.execute(
                "INSERT INTO dialog_analysis (chunk_id, version_id) VALUES (%s,%s)",
                (chunk_id, version_id),
            )
            analysis_id = cur.lastrowid

            for name, value in kwargs.items():
                crit = criteria_map.get(name)
                if not crit:
                    continue
                cur.execute(
                    "INSERT INTO dialog_analysis_values (analysis_id, criterion_id, value_text) VALUES (%s,%s,%s)",
                    (analysis_id, crit["id"], json.dumps(value, ensure_ascii=False)),
                )

            conn.commit()
        except Error as e:
            logging.error(f"Failed to save analysis: {e}")
        finally:
            cur.close()
            conn.close()
        return kwargs

    tools = [
        {
            "type": "function",
            "function": {
                "name": "analyze_dialog",
                "description": "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
                "parameters": {
                    "type": "object",
                    "properties": properties,
                    "required": required,
                    "additionalProperties": False,
                },
                "strict": True,
            },
        }
    ]

    args = None
    max_attempts = 3
    for attempt in range(1, max_attempts + 1):
        completion = openai.chat.completions.create(
            model=MODEL_EVAL,
            messages=[{"role": "system", "content": prompt_text}, {"role": "user", "content": dialog_text}],
            tools=tools,
        )

        tool_calls = getattr(completion.choices[0].message, "tool_calls", []) or []
        if tool_calls:
            tool_call = tool_calls[0]
            try:
                args = json.loads(tool_call.function.arguments)
                break
            except json.JSONDecodeError as e:
                logging.error(
                    "Attempt %s: failed to decode JSON from LLM response: %s. Arguments: %s",
                    attempt,
                    e,
                    tool_call.function.arguments,
                )
                if attempt == max_attempts:
                    logging.error("Max attempts reached while decoding JSON")
                    return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ü–µ–Ω–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
                continue
        else:
            args = {name: 0 for name in required}
            break

    if args is None:
        args = {name: 0 for name in required}

    result = analyze_dialog(**args)
    return result.get(REPORT_CRITERION, "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    chat_id = message.chat.id

    if not is_authorized(chat_id):
        set_await_password(chat_id, True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
        return

    conn = get_db_connection()
    if not conn:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    sale_points = get_sale_points(conn)
    conn.close()

    if not sale_points:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤")
        return

    keyboard = types.InlineKeyboardMarkup()
    for sp in sale_points:
        keyboard.add(types.InlineKeyboardButton(sp["display_name"], callback_data=f"sp:{sp['sale_point_id']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –ø–∏—Ü—Ü–µ—Ä–∏–∏:", reply_markup=keyboard)


@dp.message_handler(lambda message: awaiting_password(message.chat.id), content_types=types.ContentType.TEXT)
async def handle_password(message: types.Message):
    chat_id = message.chat.id
    if message.text.strip() == (BOT_PASSWORD or ""):
        set_authorized(chat_id)
        set_await_password(chat_id, False)
        await message.answer("–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!")
        await handle_start(message)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.callback_query_handler(lambda c: c.data.startswith('sp:'))
async def process_sale_point(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    if not is_authorized(chat_id):
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    sale_point_id = callback_query.data.split(':')[1]
    redis_client.set(f"sale_point:{chat_id}", sale_point_id)
    tz = pytz.timezone("Europe/Moscow")
    redis_client.set(f"start_time:{chat_id}", datetime.now(tz).isoformat())
    redis_client.delete(f"evaluated:{chat_id}")
    init_conversation_history(chat_id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(chat_id, "–í—Å–µ –≥–æ—Ç–æ–≤–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥! –ù–∞–ø–æ–º–Ω—é, —á—Ç–æ —è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—à–µ–ª –≤ –º–∞–≥–∞–∑–∏–Ω —Ä–∞–∑–ª–∏–≤–Ω–æ–≥–æ –ø–∏–≤–∞. –ê –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü. –ò—Ç–∞–∫, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –≤–∞—à—É –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∑—É (–≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).")


# üîπ –§–æ–ª–±—ç–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: True)
async def fallback_callback_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /evaluate
@dp.message_handler(commands=["evaluate"])
async def handle_evaluate(message: types.Message):
    chat_id = message.chat.id
    if not is_authorized(chat_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    sale_point_id = redis_client.get(f"sale_point:{chat_id}")
    start_time = redis_client.get(f"start_time:{chat_id}")
    if not sale_point_id or not start_time:
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if redis_client.get(f"evaluated:{chat_id}"):
        await message.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –±—ã–ª –æ—Ü–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        week_ago = datetime.utcnow() - timedelta(days=7)
        cursor.execute(
            "SELECT COUNT(*) FROM analysis_versions WHERE description LIKE %s AND created_at >= %s AND is_active = 1",
            (f"%Chat_id: {chat_id}%", week_ago.strftime("%Y-%m-%d %H:%M:%S")),
        )
        count = cursor.fetchone()[0]
        cursor.close()
        conn.close()
        if count >= EVAL_LIMIT_PER_WEEK:
            await message.answer(f"–ü—Ä–µ–≤—ã—à–µ–Ω –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({EVAL_LIMIT_PER_WEEK})")
            return

    await message.answer("‚è≥ –û—Ü–µ–Ω–∏–≤–∞—é –¥–∏–∞–ª–æ–≥...")
    evaluation = evaluate_conversation(chat_id, sale_point_id, start_time)
    redis_client.set(f"evaluated:{chat_id}", "1")
    await message.answer(f"üìä –û—Ü–µ–Ω–∫–∞ –¥–∏–∞–ª–æ–≥–∞:\n\n{evaluation}")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    chat_id = message.chat.id
    if awaiting_password(chat_id):
        await handle_password(message)
        return
    if not is_authorized(chat_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    user_input = message.text
    sale_point_id = redis_client.get(f"sale_point:{chat_id}")
    if not sale_point_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª")
        return
    await message.answer("‚è≥ –î—É–º–∞—é...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _ = get_conversation_history(chat_id)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    append_message(chat_id, "user", user_input)
    history = get_conversation_history(chat_id)

    logging.info("History before LLM request for chat %s: %s", chat_id, json.dumps(history, ensure_ascii=False))

    # start_time = time.perf_counter()
    response = openai.chat.completions.create(
        model=MODEL_CHAT,
        messages=history
    )
    #elapsed_time = time.perf_counter() - start_time

    answer = response.choices[0].message.content
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ—Ç–≤–µ—Ç—É
    #full_answer = f"{answer}\n\n(–ó–∞–ø—Ä–æ—Å –∫ OpenAI –∑–∞–Ω—è–ª {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥)"

    await message.answer(answer)
    # await message.answer(full_answer)
    append_message(chat_id, "assistant", answer)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –æ—Ç–≤–µ—Ç–∞
    audio_path = generate_audio(answer)
    try:
        with open(audio_path, "rb") as audio:
            await message.answer_voice(audio)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        os.remove(audio_path)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Speech-to-Text)
@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    chat_id = message.chat.id
    if awaiting_password(chat_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–∞—á–∞–ª–∞")
        return
    if not is_authorized(chat_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    sale_point_id = redis_client.get(f"sale_point:{chat_id}")
    if not sale_point_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª")
        return
    file_info = await bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    temp_dir = tempfile.gettempdir()
    unique_filename = f"{uuid.uuid4()}.ogg"
    temp_audio_path = os.path.join(temp_dir, unique_filename)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    response = requests.get(file_url)
    with open(temp_audio_path, "wb") as f:
        f.write(response.content)
    
    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å
    with open(temp_audio_path, "rb") as f:
        transcript = openai.audio.transcriptions.create(
            model="whisper-1",
            file=f
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .ogg —Ñ–∞–π–ª
    os.remove(temp_audio_path)
    
    user_text = transcript.text
    await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {user_text}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _ = get_conversation_history(chat_id)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    append_message(chat_id, "user", user_text)
    history = get_conversation_history(chat_id)
    
    logging.info("History before LLM request for chat %s: %s", chat_id, json.dumps(history, ensure_ascii=False))

    response = openai.chat.completions.create(
        model=MODEL_CHAT,
        messages=history
    )
    
    answer = response.choices[0].message.content
    await message.answer(answer)
    append_message(chat_id, "assistant", answer)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –æ—Ç–≤–µ—Ç–∞
    audio_path = generate_audio(answer)
    try:
        with open(audio_path, "rb") as audio:
            await message.answer_voice(audio)
    finally:
        os.remove(audio_path)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook_soh_stas_bot")
async def webhook(request: Request):
    update = await request.json()
    telegram_update = types.Update(**update)
    await dp.process_update(telegram_update)
    return {"status": "ok"}

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async def on_startup():
    webhook_url = "https://myuninet.ru/webhook_soh_stas_bot"
    await bot.set_webhook(webhook_url)

async def on_shutdown():
    await bot.delete_webhook()

# üîπ –ó–∞–ø—É—Å–∫ FastAPI + aiogram –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
if __name__ == "__main__":
    import asyncio
    Bot.set_current(bot)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup())
    uvicorn.run(app, host="0.0.0.0", port=8005)
